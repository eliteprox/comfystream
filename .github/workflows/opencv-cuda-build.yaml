name: Build OpenCV with CUDA Support

on:
  push:
    branches:
      - main
    paths:
      - 'docker/opencv-build.sh'
      - '.github/workflows/opencv-cuda-build.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'docker/opencv-build.sh'
      - '.github/workflows/opencv-cuda-build.yaml'
  workflow_dispatch:
    inputs:
      opencv_version:
        description: 'OpenCV version to build'
        required: false
        default: '4.11.0'
        type: string
      cuda_arch:
        description: 'CUDA architecture'
        required: false
        default: '8.0+PTX'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-opencv-cuda:
    name: Build OpenCV with CUDA Support
    runs-on: [self-hosted, linux, gpu]
    container:
      image: nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
      options: --gpus all
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up environment variables
        run: |
          echo "OPENCV_VERSION=${{ github.event.inputs.opencv_version || '4.11.0' }}" >> $GITHUB_ENV
          echo "CUDA_ARCH_LIST=${{ github.event.inputs.cuda_arch || '8.0+PTX' }}" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          apt-get update && apt-get install -y \
            git \
            wget \
            nano \
            socat \
            libsndfile1 \
            build-essential \
            llvm \
            tk-dev \
            cmake \
            libgflags-dev \
            libgoogle-glog-dev \
            libjpeg-dev \
            libavcodec-dev \
            libavformat-dev \
            libavutil-dev \
            libswscale-dev \
            python3 \
            python3-dev \
            python3-pip \
            pkg-config \
            libgtk-3-dev \
            libavresample-dev \
            libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev \
            libxvidcore-dev \
            libx264-dev \
            libgtk-3-dev \
            libtbb2 \
            libtbb-dev \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            libdc1394-22-dev

      - name: Install Python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install numpy

      - name: Clone OpenCV repositories
        run: |
          git clone --depth 1 --branch ${{ env.OPENCV_VERSION }} https://github.com/opencv/opencv.git
          git clone --depth 1 --branch ${{ env.OPENCV_VERSION }} https://github.com/opencv/opencv_contrib.git

      - name: Create build directory
        run: mkdir -p opencv/build

      - name: Create custom toolchain file
        run: |
          cat > custom_toolchain.cmake << EOF
          # Custom toolchain file to exclude Conda paths

          # Set system compilers
          set(CMAKE_C_COMPILER "/usr/bin/gcc")
          set(CMAKE_CXX_COMPILER "/usr/bin/g++")

          # Set system root directories
          set(CMAKE_FIND_ROOT_PATH "/usr")
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

          # Set RPATH settings
          set(CMAKE_SKIP_BUILD_RPATH FALSE)
          set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
          set(CMAKE_INSTALL_RPATH "/usr/local/lib:/usr/lib/x86_64-linux-gnu")
          set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
          EOF

      - name: Configure OpenCV build
        working-directory: opencv/build
        run: |
          cmake \
            -D CMAKE_TOOLCHAIN_FILE=/github/workspace/custom_toolchain.cmake \
            -D CMAKE_BUILD_TYPE=RELEASE \
            -D CMAKE_INSTALL_PREFIX=/usr/local \
            -D WITH_CUDA=ON \
            -D WITH_CUDNN=ON \
            -D WITH_CUBLAS=ON \
            -D WITH_TBB=ON \
            -D CUDA_ARCH_LIST="${{ env.CUDA_ARCH_LIST }}" \
            -D OPENCV_DNN_CUDA=ON \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
            -D OPENCV_EXTRA_MODULES_PATH=/github/workspace/opencv_contrib/modules \
            -D PYTHON3_EXECUTABLE=/usr/bin/python3 \
            -D PYTHON_INCLUDE_DIR=/usr/include/python3.10 \
            -D PYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.10.so \
            -D HAVE_opencv_python3=ON \
            -D WITH_NVCUVID=OFF \
            -D WITH_NVCUVENC=OFF \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_opencv_apps=OFF \
            ..

      - name: Build OpenCV
        working-directory: opencv/build
        run: |
          make -j$(nproc)

      - name: Install OpenCV
        working-directory: opencv/build
        run: |
          make install
          ldconfig

      - name: Verify OpenCV CUDA installation
        run: |
          python3 -c "import cv2; print('OpenCV version:', cv2.__version__); print('CUDA devices:', cv2.cuda.getCudaEnabledDeviceCount())"

      - name: Create Python package directory
        run: |
          mkdir -p opencv-cuda-package/cv2
          cp -r /usr/local/lib/python3.10/site-packages/cv2/* opencv-cuda-package/cv2/ || true
          find /usr/local/lib/python3.10/dist-packages/cv2 -name "*.so" -exec cp {} opencv-cuda-package/cv2/ \; || true

      - name: Copy OpenCV libraries
        run: |
          mkdir -p opencv-cuda-package/lib
          cp /usr/local/lib/libopencv_* opencv-cuda-package/lib/

      - name: Create build info file
        run: |
          cat > opencv-cuda-package/build_info.txt << EOF
          OpenCV Version: ${{ env.OPENCV_VERSION }}
          CUDA Architecture: ${{ env.CUDA_ARCH_LIST }}
          Build Date: $(date)
          Git Commit: ${{ github.sha }}
          Git Ref: ${{ github.ref }}
          EOF

      - name: Create tarball artifact
        run: |
          cd opencv-cuda-package
          tar -czf ../opencv-cuda-release.tar.gz .
          cd ..

      - name: Upload OpenCV CUDA artifact
        uses: actions/upload-artifact@v4
        with:
          name: opencv-cuda-release-${{ env.OPENCV_VERSION }}-${{ github.sha }}
          path: opencv-cuda-release.tar.gz
          retention-days: 30

      - name: Create release on tag
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          files: opencv-cuda-release.tar.gz
          name: OpenCV CUDA ${{ env.OPENCV_VERSION }} Release
          body: |
            # OpenCV with CUDA Support Release

            This release contains OpenCV ${{ env.OPENCV_VERSION }} compiled with CUDA support.

            ## Build Information
            - **OpenCV Version**: ${{ env.OPENCV_VERSION }}
            - **CUDA Architecture**: ${{ env.CUDA_ARCH_LIST }}
            - **Build Date**: $(date)
            - **Git Commit**: ${{ github.sha }}

            ## Installation
            Extract the tarball and follow the installation instructions in the documentation.

            ## Verification
            After installation, verify CUDA support with:
            ```python
            import cv2
            print(f"OpenCV version: {cv2.__version__}")
            print(f"CUDA devices: {cv2.cuda.getCudaEnabledDeviceCount()}")
            ```
          generate_release_notes: true
          make_latest: true