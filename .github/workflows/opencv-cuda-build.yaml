name: Build OpenCV with CUDA Support

on:
  push:
    branches:
      - main
    paths:
      - 'docker/opencv-build.sh'
      - '.github/workflows/opencv-cuda-build.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'docker/opencv-build.sh'
      - '.github/workflows/opencv-cuda-build.yaml'
  workflow_dispatch:
    inputs:
      opencv_version:
        description: 'OpenCV version to build'
        required: false
        default: '4.11.0'
        type: string
      cuda_arch:
        description: 'CUDA architecture'
        required: false
        default: '8.0+PTX'
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-opencv-cuda:
    name: Build OpenCV with CUDA Support
    runs-on: [self-hosted, linux, gpu]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up environment variables
        run: |
          echo "OPENCV_VERSION=${{ github.event.inputs.opencv_version || '4.11.0' }}" >> $GITHUB_ENV
          echo "CUDA_ARCH_LIST=${{ github.event.inputs.cuda_arch || '8.0+PTX' }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.CI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.CI_DOCKERHUB_TOKEN }}

      - name: Build OpenCV CUDA Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.opencv-cuda
          build-args: |
            BASE_IMAGE=livepeer/comfyui-base:latest
            OPENCV_VERSION=${{ env.OPENCV_VERSION }}
            CUDA_ARCH_LIST=${{ env.CUDA_ARCH_LIST }}
            PYTHON_VERSION=3.11
          tags: opencv-cuda-builder:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract artifacts from Docker image
        run: |
          # Create a container from the built image
          docker create --name opencv-extract opencv-cuda-builder:latest
          
          # Extract the built artifacts
          docker cp opencv-extract:/workspace/opencv-cuda-release.tar.gz ./
          docker cp opencv-extract:/workspace/opencv-cuda-release.tar.gz.sha256 ./
          docker cp opencv-extract:/workspace/opencv-cuda-release.tar.gz.md5 ./
          
          # Clean up the container
          docker rm opencv-extract

      - name: Verify extracted artifacts
        run: |
          echo "=== Artifact Verification ==="
          ls -la opencv-cuda-release.*
          echo ""
          echo "SHA256: $(cat opencv-cuda-release.tar.gz.sha256)"
          echo "MD5: $(cat opencv-cuda-release.tar.gz.md5)"
          echo ""
          echo "Archive contents (first 10 files):"
          tar -tzf opencv-cuda-release.tar.gz | head -10

      - name: Upload OpenCV CUDA artifact
        uses: actions/upload-artifact@v4
        with:
          name: opencv-cuda-release-${{ env.OPENCV_VERSION }}-${{ github.sha }}
          path: opencv-cuda-release.tar.gz
          retention-days: 30

      - name: Create release on tag
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          files: opencv-cuda-release.tar.gz
          name: OpenCV CUDA ${{ env.OPENCV_VERSION }} Release
          body: |
            # OpenCV with CUDA Support Release

            This release contains OpenCV ${{ env.OPENCV_VERSION }} compiled with CUDA support.

            ## Build Information
            - **OpenCV Version**: ${{ env.OPENCV_VERSION }}
            - **CUDA Architecture**: ${{ env.CUDA_ARCH_LIST }}
            - **Build Date**: $(date)
            - **Git Commit**: ${{ github.sha }}

            ## Installation
            Extract the tarball and follow the installation instructions in the documentation.

            ## Verification
            After installation, verify CUDA support with:
            ```python
            import cv2
            print(f"OpenCV version: {cv2.__version__}")
            print(f"CUDA devices: {cv2.cuda.getCudaEnabledDeviceCount()}")
            ```
          generate_release_notes: true
          make_latest: true